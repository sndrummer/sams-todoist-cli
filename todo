#!/usr/bin/env python3

import sys
import os
import requests
import termios
import tty
from datetime import datetime, timedelta
from dotenv import load_dotenv
import time

load_dotenv()

API_KEY = os.getenv('TODOIST_API_KEY')
BASE_URL = 'https://api.todoist.com/rest/v2'

# ANSI color codes
class Colors:
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    CYAN = '\033[96m'
    MAGENTA = '\033[95m'
    RED = '\033[91m'
    BOLD = '\033[1m'
    DIM = '\033[2m'
    RESET = '\033[0m'

def get_headers():
    return {
        'Authorization': f'Bearer {API_KEY}',
        'Content-Type': 'application/json'
    }

def get_projects():
    url = f'{BASE_URL}/projects'
    response = requests.get(url, headers=get_headers())
    return response.json() if response.status_code == 200 else []

def get_project_id(project_name, create_if_missing=False):
    projects = get_projects()
    for project in projects:
        if project['name'].lower() == project_name.lower():
            return project['id']
    if create_if_missing:
        response = requests.post(f'{BASE_URL}/projects', headers=get_headers(), json={'name': project_name})
        return response.json()['id'] if response.status_code == 200 else None
    return None

def fetch_tasks():
    url = f'{BASE_URL}/tasks'
    response = requests.get(url, headers=get_headers())
    return response.json() if response.status_code == 200 else []

def filter_tasks(tasks, filter_type):
    if filter_type in ['today', 'tomorrow']:
        target_date = datetime.now().date() if filter_type == 'today' else (datetime.now() + timedelta(days=1)).date()
        return [t for t in tasks if t.get('due') and not t.get('is_completed', False) and
                datetime.strptime(t['due']['date'], '%Y-%m-%d').date() == target_date]
    else:
        project_id = get_project_id(filter_type)
        if not project_id:
            return []
        return [t for t in tasks if t.get('project_id') == project_id and not t.get('is_completed', False)]

def create_task(content, due_string=None, project_name=None, silent=False):
    data = {'content': content}
    if due_string:
        data['due_string'] = due_string
    if project_name:
        data['project_id'] = get_project_id(project_name, create_if_missing=True)
    response = requests.post(f'{BASE_URL}/tasks', headers=get_headers(), json=data)
    if not silent:
        print("✓ Task created!" if response.status_code == 200 else f"Error: {response.status_code}")
    return response.status_code == 200

def list_tasks(filter_type):
    tasks = fetch_tasks()
    filtered = filter_tasks(tasks, filter_type)
    if not filtered:
        print(f"No tasks for {filter_type}")
        return
    print(f"\n{filter_type.capitalize()} tasks:")
    for i, task in enumerate(filtered, 1):
        print(f"{i}. {task['content']}")

def get_single_char():
    fd = sys.stdin.fileno()
    old_settings = termios.tcgetattr(fd)
    try:
        tty.setraw(sys.stdin.fileno())
        ch = sys.stdin.read(1)
        if ch == '\x1b':
            ch2 = sys.stdin.read(1)
            ch3 = sys.stdin.read(1)
            if ch2 == '[':
                return 'UP' if ch3 == 'A' else 'DOWN' if ch3 == 'B' else ch3
        return ch
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)

def clear_lines(n):
    for _ in range(n):
        print('\033[1A\033[2K', end='')
    print('\r', end='')

def interactive_mode(filter_type, initial_newline=True):
    project_id = get_project_id(filter_type) if filter_type not in ['today', 'tomorrow'] else None
    if filter_type not in ['today', 'tomorrow'] and not project_id:
        print(f"Project '{filter_type}' not found")
        time.sleep(1)
        clear_lines(1)
        return

    def refresh_tasks():
        tasks = fetch_tasks()
        return filter_tasks(tasks, filter_type)

    filtered_tasks = refresh_tasks()
    if not filtered_tasks:
        print(f"No incomplete tasks for {filter_type}")
        time.sleep(1)
        clear_lines(1)
        return

    def display_tasks(current_idx, full_redraw=False, initial=False, initial_newline=True):
        if full_redraw:
            header_text = filter_type.upper()
            padding = max(0, (32 - len(header_text)) // 2)
            line = "═" * padding
            if initial:
                if initial_newline:
                    print(f"\n{Colors.CYAN}{Colors.BOLD}{line} {header_text} {line}{Colors.RESET}")
                else:
                    print(f"{Colors.CYAN}{Colors.BOLD}{line} {header_text} {line}{Colors.RESET}")
            else:
                print(f"{Colors.CYAN}{Colors.BOLD}{line} {header_text} {line}{Colors.RESET}")
        else:
            print(f'\033[{len(filtered_tasks) + 1}A', end='')
            print('\033[J', end='')
        for i, task in enumerate(filtered_tasks):
            if i == current_idx:
                print(f"{Colors.GREEN}{Colors.BOLD}➤{Colors.RESET} {Colors.GREEN}{task['content']}{Colors.RESET} {Colors.MAGENTA}(Ent/c to complete){Colors.RESET}")
            else:
                print(f"  {Colors.DIM}{task['content']}{Colors.RESET}")
        print(f"{Colors.MAGENTA}a:Add|e:Edit|d:Del|r:Ref|m:Menu|q:Quit{Colors.RESET}")

    current_idx = 0
    display_tasks(current_idx, full_redraw=True, initial=True, initial_newline=initial_newline)

    while filtered_tasks:
        ch = get_single_char()
        if ch in ['q', 'Q', '\x03']:
            clear_lines(len(filtered_tasks) + 2)
            return
        elif ch in ['m', 'M']:
            clear_lines(len(filtered_tasks) + 2)
            return
        elif ch in ['UP', 'k', 'K', 'h', 'H']:
            current_idx = max(0, current_idx - 1)
            display_tasks(current_idx)
        elif ch in ['DOWN', 'j', 'J', 'l', 'L']:
            current_idx = min(len(filtered_tasks) - 1, current_idx + 1)
            display_tasks(current_idx)
        elif ch in ['\r', '\n', 'c', 'C']:  # Complete
            task = filtered_tasks[current_idx]
            response = requests.post(f"{BASE_URL}/tasks/{task['id']}/close", headers=get_headers())
            if response.status_code == 204:
                clear_lines(len(filtered_tasks) + 2)
                print(f"{Colors.GREEN}✓ Completed: {task['content']}{Colors.RESET}")
                filtered_tasks.pop(current_idx)
                if current_idx >= len(filtered_tasks) and current_idx > 0:
                    current_idx -= 1
                if not filtered_tasks:
                    print(f"{Colors.GREEN}{Colors.BOLD}🎉 All tasks completed! 🎉{Colors.RESET}")
                    time.sleep(0.5)
                    clear_lines(2)
                    return
                time.sleep(0.5)
                clear_lines(1)
                display_tasks(current_idx, full_redraw=True)
            else:
                clear_lines(len(filtered_tasks) + 2)
                print(f"{Colors.RED}Error completing task{Colors.RESET}")
                time.sleep(1)
                clear_lines(1)
                display_tasks(current_idx, full_redraw=True)
        elif ch in ['d', 'D']:  # Delete
            task = filtered_tasks[current_idx]
            response = requests.delete(f"{BASE_URL}/tasks/{task['id']}", headers=get_headers())
            if response.status_code == 204:
                clear_lines(len(filtered_tasks) + 2)
                print(f"{Colors.YELLOW}✓ Deleted: {task['content']}{Colors.RESET}")
                filtered_tasks.pop(current_idx)
                if current_idx >= len(filtered_tasks) and current_idx > 0:
                    current_idx -= 1
                if not filtered_tasks:
                    print(f"{Colors.GREEN}No more tasks!{Colors.RESET}")
                    time.sleep(0.5)
                    clear_lines(2)
                    return
                time.sleep(0.5)
                clear_lines(1)
                display_tasks(current_idx, full_redraw=True)
            else:
                clear_lines(len(filtered_tasks) + 2)
                print(f"{Colors.RED}Error deleting task{Colors.RESET}")
                time.sleep(1)
                clear_lines(1)
                display_tasks(current_idx, full_redraw=True)
        elif ch in ['e', 'E']:  # Edit
            task = filtered_tasks[current_idx]
            clear_lines(len(filtered_tasks) + 2)
            print(f"{Colors.YELLOW}Editing: {task['content']}{Colors.RESET}")
            print(f"{Colors.CYAN}New content (or press Enter to cancel): {Colors.RESET}", end='')
            fd = sys.stdin.fileno()
            old_settings = termios.tcgetattr(fd)
            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
            new_content = input().strip()
            if new_content:
                response = requests.post(f"{BASE_URL}/tasks/{task['id']}", headers=get_headers(), json={'content': new_content})
                if response.status_code == 200:
                    task['content'] = new_content
                    clear_lines(2)
                    print(f"{Colors.GREEN}✓ Updated task{Colors.RESET}")
                    time.sleep(0.5)
                    clear_lines(1)
                    display_tasks(current_idx, full_redraw=True)
                else:
                    clear_lines(2)
                    print(f"{Colors.RED}Error updating task{Colors.RESET}")
                    time.sleep(1)
                    clear_lines(1)
                    display_tasks(current_idx, full_redraw=True)
            else:
                clear_lines(2)
                display_tasks(current_idx, full_redraw=True)
        elif ch in ['a', 'A']:  # Add
            clear_lines(len(filtered_tasks) + 2)
            print(f"{Colors.CYAN}Add new task (or press Enter to cancel): {Colors.RESET}", end='')
            fd = sys.stdin.fileno()
            old_settings = termios.tcgetattr(fd)
            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
            new_content = input().strip()
            if new_content:
                success = create_task(new_content, due_string=filter_type if filter_type in ['today', 'tomorrow'] else None,
                                      project_name=filter_type if filter_type not in ['today', 'tomorrow'] else None, silent=True)
                if success:
                    print(f"{Colors.YELLOW}⟳ Refreshing...{Colors.RESET}")
                    filtered_tasks = refresh_tasks()
                    clear_lines(2)
                    print(f"{Colors.GREEN}✓ Task added: {new_content}{Colors.RESET}")
                    for idx, task in enumerate(filtered_tasks):
                        if task['content'] == new_content:
                            current_idx = idx
                            break
                    time.sleep(0.5)
                    clear_lines(1)
                    display_tasks(current_idx, full_redraw=True)
                else:
                    clear_lines(1)
                    print(f"{Colors.RED}Failed to add task{Colors.RESET}")
                    time.sleep(1)
                    clear_lines(1)
                    display_tasks(current_idx, full_redraw=True)
            else:
                clear_lines(1)
                display_tasks(current_idx, full_redraw=True)
        elif ch in ['r', 'R']:  # Refresh
            clear_lines(len(filtered_tasks) + 2)
            print(f"{Colors.YELLOW}⟳ Refreshing...{Colors.RESET}")
            filtered_tasks = refresh_tasks()
            clear_lines(1)
            if not filtered_tasks:
                print(f"{Colors.YELLOW}No tasks after refresh{Colors.RESET}")
                time.sleep(1)
                clear_lines(1)
                return
            current_idx = min(current_idx, len(filtered_tasks) - 1)
            display_tasks(current_idx, full_redraw=True)

def project_selector():
    projects = get_projects()
    options = [('Today', 'today'), ('Tomorrow', 'tomorrow')] + [(p['name'], p['name']) for p in projects]
    if not options:
        print("No lists available")
        return

    def display_selector(current_idx, full_redraw=False, initial=False):
        if full_redraw:
            header_text = "SELECT LIST"
            padding = max(0, (32 - len(header_text)) // 2)
            line = "═" * padding
            if initial:
                print(f"\n{Colors.CYAN}{Colors.BOLD}{line} {header_text} {line}{Colors.RESET}")
            else:
                print(f"{Colors.CYAN}{Colors.BOLD}{line} {header_text} {line}{Colors.RESET}")
        else:
            print(f'\033[{len(options) + 1}A', end='')
            print('\033[J', end='')
        for i, (display_name, _) in enumerate(options):
            if i == current_idx:
                print(f"{Colors.GREEN}{Colors.BOLD}➤{Colors.RESET} {Colors.GREEN}{display_name}{Colors.RESET} {Colors.MAGENTA}(Ent to select){Colors.RESET}")
            else:
                print(f"  {Colors.DIM}{display_name}{Colors.RESET}")
        print(f"{Colors.MAGENTA}q:Quit{Colors.RESET}")

    current_idx = 0
    display_selector(current_idx, full_redraw=True, initial=True)

    while True:
        ch = get_single_char()
        if ch in ['q', 'Q', '\x03']:
            clear_lines(len(options) + 2)
            break
        elif ch in ['UP', 'k', 'K', 'h', 'H']:
            current_idx = max(0, current_idx - 1)
            display_selector(current_idx)
        elif ch in ['DOWN', 'j', 'J', 'l', 'L']:
            current_idx = min(len(options) - 1, current_idx + 1)
            display_selector(current_idx)
        elif ch in ['\r', '\n']:
            _, filter_type = options[current_idx]
            clear_lines(len(options) + 2)
            interactive_mode(filter_type, initial_newline=False)
            display_selector(current_idx, full_redraw=True, initial=False)

def main():
    if len(sys.argv) < 2:
        print("Usage:")
        print("  todo today \"Task description\"     - Create task for today")
        print("  todo tomorrow \"Task description\"  - Create task for tomorrow")
        print("  todo today list                   - List today's tasks")
        print("  todo tomorrow list                - List tomorrow's tasks")
        print("  todo -i today                     - Interactive mode for today")
        print("  todo -i tomorrow                  - Interactive mode for tomorrow")
        print("  todo -i                           - Interactive menu to select list")
        print("  todo -i shopping                  - Interactive mode for Shopping project")
        print("  todo shopping \"Item\"              - Add to Shopping project")
        print("  todo shopping list                - List Shopping project tasks")
        sys.exit(1)

    if len(sys.argv) == 2 and sys.argv[1] == '-i':
        project_selector()
    elif sys.argv[1] == '-i' and len(sys.argv) == 3:
        interactive_mode(sys.argv[2])
    elif len(sys.argv) == 3 and sys.argv[2] == '-i':
        interactive_mode(sys.argv[1])
    elif len(sys.argv) == 3 and sys.argv[2] == 'list':
        list_tasks(sys.argv[1])
    elif len(sys.argv) == 3:
        command = sys.argv[1]
        content = sys.argv[2]
        due = command if command in ['today', 'tomorrow'] else None
        project = command if command not in ['today', 'tomorrow'] else None
        create_task(content, due_string=due, project_name=project)
    else:
        print("Error: Invalid command format")

if __name__ == '__main__':
    main()
